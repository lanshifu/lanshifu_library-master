apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
//apply plugin: 'com.tencent.tinker.patch'

android {
    signingConfigs {

        release {
            keyAlias '123456'
            keyPassword '123456'
            storeFile file('D:/git_clone/lanshifu_library-master/key.jks')
            storePassword '123456'
        }
    }
    compileSdkVersion 25
    buildToolsVersion "26.0.2"
    //**兼容Android6.0系统所需，如果这句话报错，可在dependencies标签下
    // 使用compile 'cn.bmob.android:http-legacy:1.0'**
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        applicationId "library.lanshifu.com.myapplication"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName "1.0.0"
        renderscriptSupportModeEnabled true
        multiDexEnabled true

        dexOptions {
            jumboMode = true
        }
        ndk{
//            设置了支持的 CPU 的类型
//            abiFilters "armeabi"
            abiFilters "armeabi", "armeabi-v7a", "x86_64","x86"}

        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/main/aidl']
        }
    }

    buildTypes {

        debug {
            //变量配置 通过 BuildConfig.isDebug
            buildConfigField "boolean", "isDebug", "true"
            resValue("string", "PORT_NUMBER", "8081")
        }

//        xiaomi {
//            manifestPlaceholders = [
//                    UMENG_CHANNEL: "0",
//                    UMENG_APPKEY : "12345"
//            ]
//
//        }

        release {
            buildConfigField "boolean", "isDebug", "false"
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
    }



    productFlavors {


    }

    dataBinding {
        enabled true
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']//将so文件目录指向libs目录
        }
    }

    greendao {
        schemaVersion 1
        daoPackage 'library.lanshifu.com.myapplication.greendao'
        targetGenDir 'src/main/java'
    }
//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
//    }

//    上传apk到fir
    task debugToFir {
        dependsOn 'assembleDebug'
        println("doLast")
        doLast {
            def upUrl = "http://api.fir.im/apps"
            def appName = "Python2"
            def bundleId = project.android.defaultConfig.applicationId
            def verName = project.android.defaultConfig.versionName
            def apiToken = "6ad91a35b5a345f8744989ee24c01f2e"
            def iconPath = "E:/android_project/201707/lanshifu_library-master/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png"
            def apkPath = "E:/android_project/201707/lanshifu_library-master/app//build/outputs/apk/app-debug.apk"
            def buildNumber = project.android.defaultConfig.versionCode
            def changeLog = "版本更新日志,修复crash"
            //执行Python脚本
//            workingDir './'
//            def process =commandLine "python","upToFir.py", "$upUrl", "$appName", "$bundleId", "$verName", "$apiToken", "$iconPath", "$apkPath", "$buildNumber", "$changeLog"
            //执行cmd 命令
            println("开始上传apk")
           def process = "python upToFir.py ${upUrl} ${appName} ${bundleId} ${verName} ${apiToken} ${iconPath} ${apkPath} ${buildNumber} ${changeLog}".execute()
//            def process = "python upToFir.py".execute(){

            //获取Python脚本日志，便于出错调试
            ByteArrayOutputStream result = new ByteArrayOutputStream()
            def inputStream = process.getInputStream()
            byte[] buffer = new byte[1024]
            int length
            while ((length = inputStream.read(buffer)) != -1) {
                result.write(buffer, 0, length)
            }
            println(result.toString("UTF-8"))
            println "上传结束 "
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile project(':lsf_library')
    compile project(':imagepicker')
    compile project(':fileprovdider7')
    compile project(':luban')
    compile project(':shell_library')
    compile project(':matisse')
    //如果你想应用能够兼容Android6.0，请添加此依赖(org.apache.http.legacy.jar)
    compile files('src/main/libs/BmobSDK_V3.4.6_0415.jar')
    //腾讯浏览doc/excel/pdf/ppt sdk
    compile files('src/main/libs/tbs_sdk_v3.2.0.jar')
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    compile 'com.squareup.retrofit2:converter-gson:2.2.0'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.2.0'
    compile 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.2-alpha-7'
    compile 'com.scwang.smartrefresh:SmartRefreshHeader:1.0.2-alpha-7'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.aliyun.ams:alicloud-android-hotfix:3.0.9'
    compile 'com.google.android:flexbox:0.3.0'
    compile 'fm.jiecao:jiecaovideoplayer:5.8.1'
    compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.22'
    compile 'org.litepal.android:core:1.6.0'
    //    compile 'cn.bmob.android:http-legacy:1.0'
    compile 'com.loopeer.library:cardstack:1.0.2'
    compile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    compile 'com.github.mcxtzhang:SwipeDelMenuLayout:V1.2.5'
    //谷歌vr
    compile 'com.google.vr:sdk-panowidget:1.80.0'
    //加载框 https://github.com/ybq/Android-SpinKit
    compile 'com.github.ybq:Android-SpinKit:1.1.0'
    //权限 https://github.com/jokermonn/permissions4m
    compile 'com.github.jokermonn:permissions4m:2.1.0-lib'
    // 引导层  https://github.com/huburt-Hu/NewbieGuide
    compile 'com.github.huburt-Hu:NewbieGuide:v1.0.3'
    //jsoup
    compile 'org.jsoup:jsoup:1.10.1'
    //知乎图库
    //    compile 'com.zhihu.android:matisse:0.4.3'
    //okhttp日志拦截
    debugCompile 'com.readystatesoftware.chuck:library:1.1.0'
    releaseCompile 'com.readystatesoftware.chuck:library-no-op:1.1.0'
    //https://github.com/JessYanCoding/ProgressManager 文件上传下载监听
    //    compile 'me.jessyan:progressmanager:1.5.0'
    //
    debugCompile 'com.amitshekhar.android:debug-db:1.0.1'
    provided 'com.tencent.tinker:tinker-android-anno:1.7.5'
    //tinker的核心库
    compile 'com.tencent.tinker:tinker-android-lib:1.7.5'
    compile files('src/main/libs/BaiduLBS_Android.jar')
}


public class BuildTimeListener implements TaskExecutionListener, BuildListener {
    private Clock clock
    private times = []

    @Override
    void beforeExecute(Task task) {
        clock = new org.gradle.util.Clock()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = clock.timeInMs
        times.add([ms, task.path])

        //task.project.logger.warn "${task.path} spend ${ms}ms"
    }

    @Override
    void buildStarted(Gradle gradle) {

    }

    @Override
    void settingsEvaluated(Settings settings) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {

    }

    @Override
    void projectsEvaluated(Gradle gradle) {

    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task spend time:"
        for (time in times) {
            if (time[0] >= 50) {
                printf "%7sms  %s\n", time
            }
        }
    }

}

project.gradle.addListener(new BuildTimeListener())






